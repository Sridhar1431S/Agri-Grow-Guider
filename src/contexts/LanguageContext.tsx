import { createContext, useContext, useState, useEffect, ReactNode } from 'react';

export type SupportedLanguage = 'en' | 'hi' | 'or' | 'te' | 'ta';

interface LanguageContextType {
  currentLanguage: SupportedLanguage;
  setLanguage: (language: SupportedLanguage) => void;
  t: (key: string, category?: string) => string;
}

const LanguageContext = createContext<LanguageContextType | undefined>(undefined);

const translations = {
  en: {
    // Navigation
    home: "Home",
    recommendations: "Recommendations", 
    disease: "Disease Detection",
    chat: "Chat Interface",
    profile: "Profile",
    signOut: "Sign Out",
    
    // Landing/Hero
    appTitle: "Agri Grow",
    welcome: "AI-Powered Smart Farming Platform",
    description: "Transform your farming with AI-driven insights. Get personalized crop recommendations, detect diseases instantly, monitor weather patterns, and chat with our intelligent farming assistant.",
    getStarted: "Get Started",
    viewProfile: "View Profile",
    
    // Profile
    editProfile: "Edit Profile",
    personalInfo: "Personal Information",
    farmInfo: "Farm Information", 
    firstName: "First Name",
    lastName: "Last Name",
    phone: "Phone",
    farmLocation: "Farm Location",
    farmSize: "Farm Size (acres)",
    primaryCrops: "Primary Crops",
    preferredLanguage: "Preferred Language",
    saveProfile: "Save Profile",
    profileSummary: "Profile Summary",
    
    // AI Assistant
    farmAssistant: "Farm Assistant",
    voiceOn: "Voice On",
    voiceOff: "Voice Off",
    listening: "ЁЯОд Listening... Speak now",
    thinking: "AI is thinking...",
    welcomeMessage: "Hello! I'm your farming assistant. Ask me anything about crops, irrigation, fertilizers, or weather.",
    inputPlaceholder: "Type your question here...",
  },
  hi: {
    // Navigation
    home: "рд╣реЛрдо",
    recommendations: "рд╕реБрдЭрд╛рд╡",
    disease: "рд░реЛрдЧ рдкрд╣рдЪрд╛рди", 
    chat: "рдЪреИрдЯ рдЗрдВрдЯрд░рдлреЗрд╕",
    profile: "рдкреНрд░реЛрдлрд╛рдЗрд▓",
    signOut: "рд╕рд╛рдЗрди рдЖрдЙрдЯ",
    
    // Landing/Hero
    appTitle: "рдПрдЧреНрд░реА рдЧреНрд░реЛ",
    welcome: "AI рд╕рдВрдЪрд╛рд▓рд┐рдд рд╕реНрдорд╛рд░реНрдЯ рдХреГрд╖рд┐ рдкреНрд▓реЗрдЯрдлреЙрд░реНрдо",
    description: "AI-рд╕рдВрдЪрд╛рд▓рд┐рдд рдЕрдВрддрд░реНрджреГрд╖реНрдЯрд┐ рдХреЗ рд╕рд╛рде рдЕрдкрдиреА рдХреГрд╖рд┐ рдХреЛ рдмрджрд▓реЗрдВред рд╡реНрдпрдХреНрддрд┐рдЧрдд рдлрд╕рд▓ рд╕реБрдЭрд╛рд╡ рдкреНрд░рд╛рдкреНрдд рдХрд░реЗрдВ, рддреБрд░рдВрдд рд░реЛрдЧреЛрдВ рдХрд╛ рдкрддрд╛ рд▓рдЧрд╛рдПрдВ, рдореМрд╕рдо рдкреИрдЯрд░реНрди рдХреА рдирд┐рдЧрд░рд╛рдиреА рдХрд░реЗрдВред",
    getStarted: "рд╢реБрд░реВ рдХрд░реЗрдВ",
    viewProfile: "рдкреНрд░реЛрдлрд╛рдЗрд▓ рджреЗрдЦреЗрдВ",
    
    // Profile
    editProfile: "рдкреНрд░реЛрдлрд╛рдЗрд▓ рд╕рдВрдкрд╛рджрд┐рдд рдХрд░реЗрдВ",
    personalInfo: "рд╡реНрдпрдХреНрддрд┐рдЧрдд рдЬрд╛рдирдХрд╛рд░реА",
    farmInfo: "рдЦреЗрдд рдХреА рдЬрд╛рдирдХрд╛рд░реА",
    firstName: "рдкрд╣рд▓рд╛ рдирд╛рдо",
    lastName: "рдЕрдВрддрд┐рдо рдирд╛рдо", 
    phone: "рдлреЛрди",
    farmLocation: "рдЦреЗрдд рдХрд╛ рд╕реНрдерд╛рди",
    farmSize: "рдЦреЗрдд рдХрд╛ рдЖрдХрд╛рд░ (рдПрдХрдбрд╝)",
    primaryCrops: "рдореБрдЦреНрдп рдлрд╕рд▓реЗрдВ",
    preferredLanguage: "рдкрд╕рдВрджреАрджрд╛ рднрд╛рд╖рд╛",
    saveProfile: "рдкреНрд░реЛрдлрд╛рдЗрд▓ рд╕рд╣реЗрдЬреЗрдВ",
    profileSummary: "рдкреНрд░реЛрдлрд╛рдЗрд▓ рд╕рд╛рд░рд╛рдВрд╢",
    
    // AI Assistant
    farmAssistant: "рдХреГрд╖рд┐ рд╕рд╣рд╛рдпрдХ",
    voiceOn: "рдЖрд╡рд╛рдЬ рдЪрд╛рд▓реВ",
    voiceOff: "рдЖрд╡рд╛рдЬ рдмрдВрдж",
    listening: "ЁЯОд рд╕реБрди рд░рд╣рд╛ рд╣реИ... рдЕрдм рдмреЛрд▓реЗрдВ",
    thinking: "AI рд╕реЛрдЪ рд░рд╣рд╛ рд╣реИ...",
    welcomeMessage: "рдирдорд╕реНрддреЗ! рдореИрдВ рдЖрдкрдХрд╛ рдХреГрд╖рд┐ рд╕рд╣рд╛рдпрдХ рд╣реВрдВред рдлрд╕рд▓, рд╕рд┐рдВрдЪрд╛рдИ, рдЙрд░реНрд╡рд░рдХ рдпрд╛ рдореМрд╕рдо рдХреЗ рдмрд╛рд░реЗ рдореЗрдВ рдХреБрдЫ рднреА рдкреВрдЫреЗрдВред",
    inputPlaceholder: "рдЕрдкрдирд╛ рдкреНрд░рд╢реНрди рдпрд╣рд╛рдБ рд▓рд┐рдЦреЗрдВ...",
  },
  or: {
    // Navigation  
    home: "рм╣рнЛрмо",
    recommendations: "рм╕рнБрмкрм╛рм░рм┐рм╢",
    disease: "рм░рнЛрмЧ рмЪрм┐рм╣рнНрмирмЯ",
    chat: "рмЪрм╛рмЯрнН рмЗрмгрнНрмЯрм░рмлрнЗрм╕рнН",
    profile: "рмкрнНрм░рнЛрмлрм╛рмЗрм▓рнН",
    signOut: "рм╕рм╛рмЗрмирнН рмЖрмЙрмЯрнН",
    
    // Landing/Hero
    appTitle: "рмПрмЧрнНрм░рм┐ рмЧрнНрм░рнЛ",
    welcome: "AI рмЪрм╛рм│рм┐рмд рм╕рнНрморм╛рм░рнНрмЯ рмХрнГрм╖рм┐ рмкрнНрм▓рм╛рмЯрмлрм░рнНрмо",
    description: "AI-рмЪрм╛рм│рм┐рмд рмЕрмирнНрмдрм░рнНрмжрнГрм╖рнНрмЯрм┐ рм╕рм╣рм┐рмд рмЖрмкрмгрмЩрнНрмХ рмХрнГрм╖рм┐рмХрнБ рмкрм░рм┐рммрм░рнНрмдрнНрмдрми рмХрм░рмирнНрмдрнБред рммрнНрнЯрмХрнНрмдрм┐рмЧрмд рмлрм╕рм▓ рм╕рнБрмкрм╛рм░рм┐рм╢ рмкрм╛рмЖрмирнНрмдрнБ, рмдрнБрм░рмирнНрмд рм░рнЛрмЧ рмЪрм┐рм╣рнНрмирмЯ рмХрм░рмирнНрмдрнБред",
    getStarted: "рмЖрм░рморнНрмн рмХрм░рмирнНрмдрнБ",
    viewProfile: "рмкрнНрм░рнЛрмлрм╛рмЗрм▓рнН рмжрнЗрмЦрмирнНрмдрнБ",
    
    // Profile
    editProfile: "рмкрнНрм░рнЛрмлрм╛рмЗрм▓рнН рм╕рморнНрмкрм╛рмжрмирм╛ рмХрм░рмирнНрмдрнБ",
    personalInfo: "рммрнНрнЯрмХрнНрмдрм┐рмЧрмд рм╕рнВрмЪрмирм╛",
    farmInfo: "рмЪрм╛рм╖ рм╕рнВрмЪрмирм╛",
    firstName: "рмкрнНрм░рмермо рмирм╛рмо",
    lastName: "рм╢рнЗрм╖ рмирм╛рмо",
    phone: "рмлрнЛрмирнН",
    farmLocation: "рмЪрм╛рм╖ рм╕рнНрмерм╛рми",
    farmSize: "рмЪрм╛рм╖ рмЖрмХрм╛рм░ (рмПрмХрм░)",
    primaryCrops: "рморнБрмЦрнНрнЯ рмлрм╕рм▓",
    preferredLanguage: "рмкрм╕рмирнНрмж рмнрм╛рм╖рм╛",
    saveProfile: "рмкрнНрм░рнЛрмлрм╛рмЗрм▓рнН рм╕рнЗрмнрнН рмХрм░рмирнНрмдрнБ",
    profileSummary: "рмкрнНрм░рнЛрмлрм╛рмЗрм▓рнН рм╕рм╛рм░рм╛рмВрм╢",
    
    // AI Assistant
    farmAssistant: "рмХрнГрм╖рм┐ рм╕рм╣рм╛рнЯрмХ",
    voiceOn: "рм╕рнНрн▒рм░ рмЪрм╛рм▓рнБ",
    voiceOff: "рм╕рнНрн▒рм░ рммрмирнНрмж",
    listening: "ЁЯОд рм╢рнБрмгрнБрмЫрм┐... рммрм░рнНрмдрнНрмдрморм╛рми рмХрнБрм╣рмирнНрмдрнБ",
    thinking: "AI рмЪрм┐рмирнНрмдрм╛ рмХрм░рнБрмЫрм┐...",
    welcomeMessage: "рмирморм╕рнНрмХрм╛рм░! рморнБрмБ рмЖрмкрмгрмЩрнНрмХрм░ рмХрнГрм╖рм┐ рм╕рм╣рм╛рнЯрмХред рмлрм╕рм▓, рмЬрм│рм╕рнЗрмЪрми, рм╕рм╛рм░ рмХрм┐рморнНрммрм╛ рмкрм╛рмгрм┐рмкрм╛рмЧ рммрм┐рм╖рнЯрм░рнЗ рмХрм┐рмЫрм┐ рмкрмЪрм╛рм░рмирнНрмдрнБред",
    inputPlaceholder: "рмЖрмкрмгрмЩрнНрмХрм░ рмкрнНрм░рм╢рнНрми рмПрмарм╛рм░рнЗ рм▓рнЗрмЦрмирнНрмдрнБ...",
  },
  te: {
    // Navigation
    home: "р░╣р▒Лр░ор▒Н",
    recommendations: "р░╕р░┐р░лр░╛р░░р▒Нр░╕р▒Бр░▓р▒Б", 
    disease: "р░╡р▒Нр░пр░╛р░зр░┐ р░Чр▒Бр░░р▒Нр░др░┐р░Вр░кр▒Б",
    chat: "р░Ър░╛р░Яр▒Н р░Зр░Вр░Яр░░р▒НтАМр░лр▒Зр░╕р▒Н",
    profile: "р░кр▒Нр░░р▒Кр░лр▒Ир░▓р▒Н",
    signOut: "р░╕р▒Ир░ир▒Н р░Ер░╡р▒Бр░Яр▒Н",
    
    // Landing/Hero
    appTitle: "р░Ер░Чр▒Нр░░р░┐ р░Чр▒Нр░░р▒Л",
    welcome: "AI р░ир░бр░┐р░Ър▒З р░╕р▒Нр░ор░╛р░░р▒Нр░Яр▒Н р░╡р▒Нр░пр░╡р░╕р░╛р░п р░╡р▒Зр░жр░┐р░Х",
    description: "AI-р░Жр░зр░╛р░░р░┐р░д р░Ер░Вр░др░░р▒Нр░жр▒Гр░╖р▒Нр░Яр▒Бр░▓р░др▒Л р░ор▒А р░╡р▒Нр░пр░╡р░╕р░╛р░пр░╛р░ир▒Нр░ир░┐ р░ор░╛р░░р▒Нр░Ър░Вр░бр░┐ред р░╡р▒Нр░пр░Хр▒Нр░др░┐р░Чр░др▒Ар░Хр░░р░┐р░Вр░Ър░┐р░и р░кр░Вр░Я р░╕р░┐р░лр░╛р░░р▒Нр░╕р▒Бр░▓р░ир▒Б р░кр▒Кр░Вр░жр░Вр░бр░┐, р░╡р▒Нр░пр░╛р░зр▒Бр░▓р░ир▒Б р░др░Хр▒Нр░╖р░гр░ор▒З р░Чр▒Бр░░р▒Нр░др░┐р░Вр░Ър░Вр░бр░┐ред",
    getStarted: "р░кр▒Нр░░р░╛р░░р░Вр░нр░┐р░Вр░Ър░Вр░бр░┐",
    viewProfile: "р░кр▒Нр░░р▒Кр░лр▒Ир░▓р▒Н р░Ър▒Вр░бр░Вр░бр░┐",
    
    // Profile
    editProfile: "р░кр▒Нр░░р▒Кр░лр▒Ир░▓р▒Н р░╕р░╡р░░р░┐р░Вр░Ър░Вр░бр░┐",
    personalInfo: "р░╡р▒Нр░пр░Хр▒Нр░др░┐р░Чр░д р░╕р░ор░╛р░Ър░╛р░░р░В",
    farmInfo: "р░╡р▒Нр░пр░╡р░╕р░╛р░п р░╕р░ор░╛р░Ър░╛р░░р░В",
    firstName: "р░ор▒Кр░жр░Яр░┐ р░кр▒Зр░░р▒Б",
    lastName: "р░Ър░┐р░╡р░░р░┐ р░кр▒Зр░░р▒Б",
    phone: "р░лр▒Лр░ир▒Н",
    farmLocation: "р░╡р▒Нр░пр░╡р░╕р░╛р░п р░╕р▒Нр░ер░▓р░В",
    farmSize: "р░╡р▒Нр░пр░╡р░╕р░╛р░п р░кр░░р░┐р░ор░╛р░гр░В (р░Ор░Хр░░р░╛р░▓р▒Б)",
    primaryCrops: "р░кр▒Нр░░р░зр░╛р░и р░кр░Вр░Яр░▓р▒Б",
    preferredLanguage: "р░кр▒Нр░░р░╛р░зр░╛р░ир▒Нр░п р░нр░╛р░╖",
    saveProfile: "р░кр▒Нр░░р▒Кр░лр▒Ир░▓р▒Н р░╕р▒Зр░╡р▒Н р░Ър▒Зр░пр░Вр░бр░┐",
    profileSummary: "р░кр▒Нр░░р▒Кр░лр▒Ир░▓р▒Н р░╕р░╛р░░р░╛р░Вр░╢р░В",
    
    // AI Assistant
    farmAssistant: "р░╡р▒Нр░пр░╡р░╕р░╛р░п р░╕р░╣р░╛р░пр░Хр▒Бр░бр▒Б",
    voiceOn: "р░╡р░╛р░пр░┐р░╕р▒Н р░Жр░ир▒Н",
    voiceOff: "р░╡р░╛р░пр░┐р░╕р▒Н р░Жр░лр▒Н",
    listening: "ЁЯОд р░╡р░┐р░Вр░Яр▒Бр░ир▒Нр░ир░╛р░ир▒Б... р░Зр░кр▒Нр░кр▒Бр░бр▒Б р░ор░╛р░Яр▒Нр░▓р░╛р░бр░Вр░бр░┐",
    thinking: "AI р░Жр░▓р▒Лр░Ър░┐р░╕р▒Нр░др▒Бр░ир▒Нр░ир░╛р░бр▒Б...",
    welcomeMessage: "р░╣р░▓р▒Л! р░ир▒Зр░ир▒Б р░ор▒А р░╡р▒Нр░пр░╡р░╕р░╛р░п р░╕р░╣р░╛р░пр░Хр▒Бр░бр░ир▒Б. р░кр░Вр░Яр░▓р▒Б, р░ир▒Ар░Яр░┐р░кр░╛р░░р▒Бр░жр░▓, р░Ор░░р▒Бр░╡р▒Бр░▓р▒Б р░▓р▒Зр░жр░╛ р░╡р░╛р░др░╛р░╡р░░р░гр░В р░Чр▒Бр░░р░┐р░Вр░Ър░┐ р░Пр░жр▒Ир░ир░╛ р░Ер░бр░Чр░Вр░бр░┐ред",
    inputPlaceholder: "р░ор▒А р░кр▒Нр░░р░╢р▒Нр░ир░ир▒Б р░Зр░Хр▒Нр░Хр░б р░Яр▒Ир░кр▒Н р░Ър▒Зр░пр░Вр░бр░┐...",
  },
  ta: {
    // Navigation
    home: "роорпБроХрокрпНрокрпБ",
    recommendations: "рокро░ро┐роирпНродрпБро░рпИроХро│рпН",
    disease: "роирпЛропрпН роХрогрпНроЯро▒ро┐родро▓рпН",
    chat: "роЕро░роЯрпНроЯрпИ роЗроЯрпИроорпБроХроорпН",
    profile: "роЪрпБропро╡ро┐ро╡ро░роорпН",
    signOut: "ро╡рпЖро│ро┐ропрпЗро▒рпБ",
    
    // Landing/Hero  
    appTitle: "роЕроХрпНро░ро┐ роХрпБро░рпЛ",
    welcome: "AI роЗропроХрпНроХрокрпНрокроЯрпБроорпН ро╕рпНрооро╛ро░рпНроЯрпН ро╡ро┐ро╡роЪро╛роп родро│роорпН",
    description: "AI-роЗропроХрпНроХрокрпНрокроЯрпБроорпН роирпБрогрпНрогро▒ро┐ро╡рпБроХро│рпБроЯройрпН роЙроЩрпНроХро│рпН ро╡ро┐ро╡роЪро╛ропродрпНродрпИ рооро╛ро▒рпНро▒рпБроЩрпНроХро│рпН. родройро┐рокрпНрокропройро╛роХрпНроХрокрпНрокроЯрпНроЯ рокропро┐ро░рпН рокро░ро┐роирпНродрпБро░рпИроХро│рпИрокрпН рокрпЖро▒рпБроЩрпНроХро│рпН, роирпЛропрпНроХро│рпИ роЙроЯройроЯро┐ропро╛роХ роХрогрпНроЯро▒ро┐ропрпБроЩрпНроХро│рпНред",
    getStarted: "родрпКроЯроЩрпНроХрпБроЩрпНроХро│рпН",
    viewProfile: "роЪрпБропро╡ро┐ро╡ро░роорпН рокро╛ро░рпНроХрпНроХро╡рпБроорпН",
    
    // Profile
    editProfile: "роЪрпБропро╡ро┐ро╡ро░родрпНродрпИродрпН родро┐ро░рпБродрпНродрпБ",
    personalInfo: "родройро┐рокрпНрокроЯрпНроЯ родроХро╡ро▓рпН",
    farmInfo: "рокрогрпНрогрпИ родроХро╡ро▓рпН",
    firstName: "роорпБродро▓рпН рокрпЖропро░рпН",
    lastName: "роХроЯрпИроЪро┐ рокрпЖропро░рпН",
    phone: "родрпКро▓рпИрокрпЗроЪро┐",
    farmLocation: "рокрогрпНрогрпИ роЗроЯроорпН",
    farmSize: "рокрогрпНрогрпИ роЕро│ро╡рпБ (роПроХрпНроХро░рпН)",
    primaryCrops: "роорпБродройрпНроорпИ рокропро┐ро░рпНроХро│рпН",
    preferredLanguage: "ро╡ро┐ро░рпБрокрпНрокрооро╛рой роорпКро┤ро┐",
    saveProfile: "роЪрпБропро╡ро┐ро╡ро░родрпНродрпИ роЪрпЗрооро┐",
    profileSummary: "роЪрпБропро╡ро┐ро╡ро░ роЪрпБро░рпБроХрпНроХроорпН",
    
    // AI Assistant
    farmAssistant: "рокрогрпНрогрпИ роЙродро╡ро┐ропро╛ро│ро░рпН",
    voiceOn: "роХрпБро░ро▓рпН роЗропроХрпНроХроорпН",
    voiceOff: "роХрпБро░ро▓рпН роиро┐ро▒рпБродрпНродроорпН",
    listening: "ЁЯОд роХрпЗроЯрпНроХро┐ро▒родрпБ... роЗрокрпНрокрпЛродрпБ рокрпЗроЪрпБроЩрпНроХро│рпН",
    thinking: "AI роЪро┐роирпНродро┐родрпНродрпБроХрпНроХрпКрогрпНроЯро┐ро░рпБроХрпНроХро┐ро▒родрпБ...",
    welcomeMessage: "ро╡рогроХрпНроХроорпН! роиро╛ройрпН роЙроЩрпНроХро│рпН ро╡ро┐ро╡роЪро╛роп роЙродро╡ро┐ропро╛ро│ро░рпН. рокропро┐ро░рпНроХро│рпН, роирпАро░рпНрокрпНрокро╛роЪройроорпН, роЙро░роЩрпНроХро│рпН роЕро▓рпНро▓родрпБ ро╡ро╛ройро┐ро▓рпИ рокро▒рпНро▒ро┐ роОродрпБро╡рпБроорпН роХрпЗроЯрпНроХро╡рпБроорпН.",
    inputPlaceholder: "роЙроЩрпНроХро│рпН роХрпЗро│рпНро╡ро┐ропрпИ роЗроЩрпНроХрпЗ родроЯрпНроЯроЪрпНроЪрпБ роЪрпЖропрпНропрпБроЩрпНроХро│рпН...",
  }
};

interface LanguageProviderProps {
  children: ReactNode;
}

export function LanguageProvider({ children }: LanguageProviderProps) {
  const [currentLanguage, setCurrentLanguage] = useState<SupportedLanguage>(() => {
    const saved = localStorage.getItem('agri-grow-language');
    return (saved as SupportedLanguage) || 'en';
  });

  useEffect(() => {
    localStorage.setItem('agri-grow-language', currentLanguage);
  }, [currentLanguage]);

  const setLanguage = (language: SupportedLanguage) => {
    setCurrentLanguage(language);
  };

  const t = (key: string, category?: string): string => {
    const langTranslations = translations[currentLanguage] || translations.en;
    return langTranslations[key] || key;
  };

  return (
    <LanguageContext.Provider value={{ currentLanguage, setLanguage, t }}>
      {children}
    </LanguageContext.Provider>
  );
}

export function useLanguage() {
  const context = useContext(LanguageContext);
  if (context === undefined) {
    throw new Error('useLanguage must be used within a LanguageProvider');
  }
  return context;
}